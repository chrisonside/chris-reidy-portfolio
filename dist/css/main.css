@charset "UTF-8";
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after, q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/**
*
* Border-box sizing by default
*
**/
html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

*, *:before, *:after {
  -webkit-box-sizing: inherit;
          box-sizing: inherit; }

/**
*
* Base font size for REM usage
*
**/
html {
  height: 100%;
  font-size: 62.5%; }

/**
*
* Clearfix
*
**/
.cf:after {
  content: "";
  display: table;
  clear: both; }

/**
*
* Vertical align
*
**/
/**
*
* Z-index levels
*
**/
/**
*
* REM mixin with pixel fallback
* -- Eduardo Bou√ßas (https://github.com/eduardoboucas/)
*
* NOTE: You must set the font-size to 62.5% on the html element!
*
**/
/**
*
* Import fonts
*
**/
/**
*
* Page width constrain. Set the max and minimum width and use `@extend %constrain` to constrain the width.
*
**/
body {
  font-size: 16px;
  font-size: 1.6rem;
  font-family: Verdana, Helvetica; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zYXNzL21haW4uY3NzIiwiL3Nhc3MvYmFzZS9fcmVzZXQuc2NzcyIsIi9zYXNzL2Jhc2UvX2Jhc2Uuc2NzcyIsIi9zYXNzL21peGlucy9fZm9udC1zaXplLnNjc3MiLCIvc2Fzcy9nbG9iYWwvX3R5cG9ncmFwaHkuc2NzcyIsIi9zYXNzL2dsb2JhbC9fZ2xvYmFsLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCO0FDQWpCOzs7RUFHRTtBQUVGO0VBQ0ksVUFBVTtFQUNWLFdBQVc7RUFDWCxVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCLGNBQWM7RUFDZCx5QkFBeUIsRUFDNUI7O0FBRUQ7RUFDSSxlQUFlLEVBQ2xCOztBQUVEO0VBQ0ksZUFBZSxFQUNsQjs7QUFFRDtFQUNJLGlCQUFpQixFQUNwQjs7QUFFRDtFQUNJLGFBQWEsRUFDaEI7O0FBRUQ7RUFDSSxZQUFZO0VBQ1osY0FBYyxFQUNqQjs7QUFFRDtFQUNJLDBCQUEwQjtFQUMxQixrQkFBa0IsRUFDckI7O0FDdENEOzs7O0dBSUc7QUFFSDtFQUNJLCtCQUF1QjtVQUF2Qix1QkFBdUIsRUFDMUI7O0FBRUQ7RUFDSSw0QkFBb0I7VUFBcEIsb0JBQW9CLEVBQ3ZCOztBQUVEOzs7O0dBSUc7QUFFSDtFQUNJLGFBQWE7RUFDYixpQkFBaUIsRUFDcEI7O0FBRUQ7Ozs7R0FJRztBQUVIO0VBRVEsWUFBWTtFQUNaLGVBQWU7RUFDZixZQUFZLEVBQ2Y7O0FBR0w7Ozs7R0FJRztBQVVIOzs7O0dBSUc7QUN6REg7Ozs7Ozs7R0FPRztBQ1BIOzs7O0dBSUc7QUNKSDs7OztHQUlHO0FBU0g7RUZIQyxnQkVJd0I7RUZIeEIsa0JBQXNCO0VFSW5CLGdDRFA2QixFQ1FoQyIsImZpbGUiOiJtYWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcbi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvIFxuICAgdjIuMCB8IDIwMTEwMTI2XG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxuKi9cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSwgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLCBhLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsIGRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCwgc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhciwgYiwgdSwgaSwgY2VudGVyLCBkbCwgZHQsIGRkLCBvbCwgdWwsIGxpLCBmaWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCwgdGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsIGFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBmaWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LCB0aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuYm9keSB7XG4gIGxpbmUtaGVpZ2h0OiAxOyB9XG5cbm9sLCB1bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cblxuYmxvY2txdW90ZSwgcSB7XG4gIHF1b3Rlczogbm9uZTsgfVxuXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlciwgcTpiZWZvcmUsIHE6YWZ0ZXIge1xuICBjb250ZW50OiAnJztcbiAgY29udGVudDogbm9uZTsgfVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbi8qKlxuKlxuKiBCb3JkZXItYm94IHNpemluZyBieSBkZWZhdWx0XG4qXG4qKi9cbmh0bWwge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyB9XG5cbiosICo6YmVmb3JlLCAqOmFmdGVyIHtcbiAgYm94LXNpemluZzogaW5oZXJpdDsgfVxuXG4vKipcbipcbiogQmFzZSBmb250IHNpemUgZm9yIFJFTSB1c2FnZVxuKlxuKiovXG5odG1sIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICBmb250LXNpemU6IDYyLjUlOyB9XG5cbi8qKlxuKlxuKiBDbGVhcmZpeFxuKlxuKiovXG4uY2Y6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBkaXNwbGF5OiB0YWJsZTtcbiAgY2xlYXI6IGJvdGg7IH1cblxuLyoqXG4qXG4qIFZlcnRpY2FsIGFsaWduXG4qXG4qKi9cbi8qKlxuKlxuKiBaLWluZGV4IGxldmVsc1xuKlxuKiovXG4vKipcbipcbiogUkVNIG1peGluIHdpdGggcGl4ZWwgZmFsbGJhY2tcbiogLS0gRWR1YXJkbyBCb3XDp2FzIChodHRwczovL2dpdGh1Yi5jb20vZWR1YXJkb2JvdWNhcy8pXG4qXG4qIE5PVEU6IFlvdSBtdXN0IHNldCB0aGUgZm9udC1zaXplIHRvIDYyLjUlIG9uIHRoZSBodG1sIGVsZW1lbnQhXG4qXG4qKi9cbi8qKlxuKlxuKiBJbXBvcnQgZm9udHNcbipcbioqL1xuLyoqXG4qXG4qIFBhZ2Ugd2lkdGggY29uc3RyYWluLiBTZXQgdGhlIG1heCBhbmQgbWluaW11bSB3aWR0aCBhbmQgdXNlIGBAZXh0ZW5kICVjb25zdHJhaW5gIHRvIGNvbnN0cmFpbiB0aGUgd2lkdGguXG4qXG4qKi9cbmJvZHkge1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtc2l6ZTogMS42cmVtO1xuICBmb250LWZhbWlseTogVmVyZGFuYSwgSGVsdmV0aWNhOyB9XG4iLCIvKiBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0LyBcbiAgIHYyLjAgfCAyMDExMDEyNlxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcbiovXG5cbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSwgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLCBhLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsIGRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCwgc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhciwgYiwgdSwgaSwgY2VudGVyLCBkbCwgZHQsIGRkLCBvbCwgdWwsIGxpLCBmaWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCwgdGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsIGFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCAgZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCAgbWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksIHRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XG4gICBcdG1hcmdpbjogMDtcbiAgIFx0cGFkZGluZzogMDtcbiAgIFx0Ym9yZGVyOiAwO1xuICAgXHRmb250LXNpemU6IDEwMCU7XG4gICBcdGZvbnQ6IGluaGVyaXQ7XG4gICBcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcbiAgIFx0ZGlzcGxheTogYmxvY2s7XG59XG5cbmJvZHkge1xuICAgXHRsaW5lLWhlaWdodDogMTtcbn1cblxub2wsIHVsIHtcbiAgIFx0bGlzdC1zdHlsZTogbm9uZTtcbn1cblxuYmxvY2txdW90ZSwgcSB7XG4gICBcdHF1b3Rlczogbm9uZTtcbn1cblxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsIHE6YmVmb3JlLCBxOmFmdGVyIHtcbiAgIFx0Y29udGVudDogJyc7XG4gICBcdGNvbnRlbnQ6IG5vbmU7XG59XG5cbnRhYmxlIHtcbiAgIFx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgIFx0Ym9yZGVyLXNwYWNpbmc6IDA7XG59IiwiLyoqXG4qXG4qIEJvcmRlci1ib3ggc2l6aW5nIGJ5IGRlZmF1bHRcbipcbioqL1xuXG5odG1sIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4qLCAqOmJlZm9yZSwgKjphZnRlciB7XG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcbn1cblxuLyoqXG4qXG4qIEJhc2UgZm9udCBzaXplIGZvciBSRU0gdXNhZ2VcbipcbioqL1xuXG5odG1sIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZm9udC1zaXplOiA2Mi41JTtcbn1cblxuLyoqXG4qXG4qIENsZWFyZml4XG4qXG4qKi9cblxuLmNmIHtcbiAgICAmOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgZGlzcGxheTogdGFibGU7XG4gICAgICAgIGNsZWFyOiBib3RoO1xuICAgIH1cbn1cblxuLyoqXG4qXG4qIFZlcnRpY2FsIGFsaWduXG4qXG4qKi9cblxuJXZlcnRpY2FsLWFsaWduIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiA1MCU7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG59XG5cbi8qKlxuKlxuKiBaLWluZGV4IGxldmVsc1xuKlxuKiovXG5cbiR6LWluZGV4LWxldmVsLTE6ICAgICAgOTtcbiR6LWluZGV4LWxldmVsLTI6ICAgICA5OTtcbiR6LWluZGV4LWxldmVsLTM6ICAgIDk5OTtcbiR6LWluZGV4LWxldmVsLTQ6ICAgOTk5OTtcbiR6LWluZGV4LWxldmVsLTU6ICA5OTk5OTtcbiR6LWluZGV4LWxldmVsLTY6IDk5OTk5OTsiLCIvKipcbipcbiogUkVNIG1peGluIHdpdGggcGl4ZWwgZmFsbGJhY2tcbiogLS0gRWR1YXJkbyBCb3XDp2FzIChodHRwczovL2dpdGh1Yi5jb20vZWR1YXJkb2JvdWNhcy8pXG4qXG4qIE5PVEU6IFlvdSBtdXN0IHNldCB0aGUgZm9udC1zaXplIHRvIDYyLjUlIG9uIHRoZSBodG1sIGVsZW1lbnQhXG4qXG4qKi9cblxuQG1peGluIGZvbnQtc2l6ZSgkc2l6ZVZhbHVlOiAxNikge1xuXHRmb250LXNpemU6ICRzaXplVmFsdWUgKyBweDtcblx0Zm9udC1zaXplOiAoJHNpemVWYWx1ZSAvIDEwKSArIHJlbTtcbn1cblxuQG1peGluIGxpbmUtaGVpZ2h0KCRzaXplVmFsdWU6IDE2KSB7XG5cdGxpbmUtaGVpZ2h0OiAkc2l6ZVZhbHVlICsgcHg7XG5cdGxpbmUtaGVpZ2h0OiAoJHNpemVWYWx1ZSAvIDEwKSArIHJlbTtcbn0iLCIvKipcbipcbiogSW1wb3J0IGZvbnRzXG4qXG4qKi9cblxuLy8gZS5nLiBAaW1wb3J0IHVybCgnLy9jbG91ZC50eXBvZ3JhcGh5LmNvbS9uYW1lLW9mLWZvbnQuY3NzJyk7XG5cbiRmb250LXZlcmRhbmE6IFZlcmRhbmEsIEhlbHZldGljYTtcbiRmb250LWFyaWFsOiBBcmlhbCwgSGVsdmV0aWNhO1xuXG4kZm9udC1wcmltYXJ5OiAkZm9udC12ZXJkYW5hO1xuJGZvbnQtc2Vjb25kYXJ5OiAkZm9udC1hcmlhbDtcblxuJGZvbnQtd2VpZ2h0LWxpZ2h0OiAzMDA7XG4kZm9udC13ZWlnaHQtbm9ybWFsOiA0MDA7XG4kZm9udC13ZWlnaHQtYm9sZDogNTAwO1xuJGZvbnQtd2VpZ2h0LWJvbGRlcjogNjAwOyIsIi8qKlxuKlxuKiBQYWdlIHdpZHRoIGNvbnN0cmFpbi4gU2V0IHRoZSBtYXggYW5kIG1pbmltdW0gd2lkdGggYW5kIHVzZSBgQGV4dGVuZCAlY29uc3RyYWluYCB0byBjb25zdHJhaW4gdGhlIHdpZHRoLlxuKlxuKiovXG5cbiRsYXlvdXQtbWF4LXdpZHRoOiAxMDI0cHg7XG5cbiVjb25zdHJhaW4ge1xuICAgIG1heC13aWR0aDogJGxheW91dC1tYXgtd2lkdGg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG59XG5cbmJvZHkge1xuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgxNik7XG4gICAgZm9udC1mYW1pbHk6ICRmb250LXByaW1hcnk7XG59XG4iXX0= */
